{
  "address": "0x8F4A71a3f1405e4fC14A11d7A2aaa5e284Fe1b75",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract AlligatorToken",
          "name": "_gtr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasuryAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_investorAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gtrPerSec",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_devPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_treasuryPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_investorPercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "Add",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "SetDevAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_gtrPerSec",
          "type": "uint256"
        }
      ],
      "name": "UpdateEmissionRate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accGtrPerShare",
          "type": "uint256"
        }
      ],
      "name": "UpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_devAddr",
          "type": "address"
        }
      ],
      "name": "dev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gtr",
      "outputs": [
        {
          "internalType": "contract AlligatorToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gtrPerSec",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investorAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "investorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pendingGtr",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "bonusTokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "bonusTokenSymbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "pendingBonusToken",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accGtrPerShare",
          "type": "uint256"
        },
        {
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investorAddr",
          "type": "address"
        }
      ],
      "name": "setInvestorAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddr",
          "type": "address"
        }
      ],
      "name": "setTreasuryAddr",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rewardDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x94768a297fff11be79355049cf2fce950a44120f4aa659686ad503fa6ace739a",
  "receipt": {
    "to": null,
    "from": "0x1fF33b086994311E0eA497D4C69eE34F486729b9",
    "contractAddress": "0x8F4A71a3f1405e4fC14A11d7A2aaa5e284Fe1b75",
    "transactionIndex": 16,
    "gasUsed": "2588711",
    "logsBloom": "0x
    "blockHash": "0x7f230c90e8f020ffcbbf426caeffb0867aaca4ad74f9819369af3ce8e2697c12",
    "transactionHash": "0x94768a297fff11be79355049cf2fce950a44120f4aa659686ad503fa6ace739a",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 3879475,
        "transactionHash": "0x94768a297fff11be79355049cf2fce950a44120f4aa659686ad503fa6ace739a",
        "address": "0x8F4A71a3f1405e4fC14A11d7A2aaa5e284Fe1b75",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ff33b086994311e0ea497d4c69ee34f486729b9"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7f230c90e8f020ffcbbf426caeffb0867aaca4ad74f9819369af3ce8e2697c12"
      }
    ],
    "blockNumber": 3879475,
    "cumulativeGasUsed": "2924711",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe1ec2a58DC2C33466F3c301E79ad472E33694eD4",
    "0x1fF33b086994311E0eA497D4C69eE34F486729b9",
    "0x6c5d8D6D46C53BC9AE1619430928De3DD7D437E8",
    "0x1DD9CE4824946d2cF1EeBd1B1e765E834C19Cec8",
    "7400000000000000000",
    "1640113200",
    "150",
    "200",
    "150"
  ],
  "solcInputHash": "892a2726a32c789d2cae6756b49c1713",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract AlligatorToken\",\"name\":\"_gtr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investorAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gtrPerSec\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_investorPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"Add\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"SetDevAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gtrPerSec\",\"type\":\"uint256\"}],\"name\":\"UpdateEmissionRate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accGtrPerShare\",\"type\":\"uint256\"}],\"name\":\"UpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddr\",\"type\":\"address\"}],\"name\":\"dev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gtr\",\"outputs\":[{\"internalType\":\"contract AlligatorToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gtrPerSec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"investorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingGtr\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"bonusTokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"bonusTokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"pendingBonusToken\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accGtrPerShare\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investorAddr\",\"type\":\"address\"}],\"name\":\"setInvestorAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddr\",\"type\":\"address\"}],\"name\":\"setTreasuryAddr\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AlligatorFarmer.sol\":\"AlligatorFarmer\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/AlligatorFarmer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"./AlligatorToken.sol\\\";\\n\\ninterface IRewarder {\\n    function onGtrReward(address user, uint256 newLpAmount) external;\\n\\n    function pendingTokens(address user) external view returns (uint256 pending);\\n\\n    function rewardToken() external view returns (IERC20);\\n}\\n\\nlibrary BoringERC20 {\\n    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\\n    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\\n    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\\n    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\\n    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\\n\\n    function returnDataToString(bytes memory data) internal pure returns (string memory) {\\n        if (data.length >= 64) {\\n            return abi.decode(data, (string));\\n        } else if (data.length == 32) {\\n            uint8 i = 0;\\n            while (i < 32 && data[i] != 0) {\\n                i++;\\n            }\\n            bytes memory bytesArray = new bytes(i);\\n            for (i = 0; i < 32 && data[i] != 0; i++) {\\n                bytesArray[i] = data[i];\\n            }\\n            return string(bytesArray);\\n        } else {\\n            return \\\"???\\\";\\n        }\\n    }\\n\\n    /// @notice Provides a safe ERC20.symbol version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token symbol.\\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_SYMBOL));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.name version which returns '???' as fallback string.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (string) Token name.\\n    function safeName(IERC20 token) internal view returns (string memory) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_NAME));\\n        return success ? returnDataToString(data) : \\\"???\\\";\\n    }\\n\\n    /// @notice Provides a safe ERC20.decimals version which returns '18' as fallback value.\\n    /// @param token The address of the ERC-20 token contract.\\n    /// @return (uint8) Token decimals.\\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(SIG_DECIMALS));\\n        return success && data.length == 32 ? abi.decode(data, (uint8)) : 18;\\n    }\\n\\n    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: Transfer failed\\\");\\n    }\\n\\n    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\\n    /// Reverts on a failed transfer.\\n    /// @param token The address of the ERC-20 token.\\n    /// @param from Transfer tokens from.\\n    /// @param to Transfer tokens to.\\n    /// @param amount The token amount.\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        (bool success, bytes memory data) = address(token).call(\\n            abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount)\\n        );\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"BoringERC20: TransferFrom failed\\\");\\n    }\\n}\\n\\n// The AlligatorFarmer manages the distribution of reward tokens to holders of staked LP tokens.\\n// It rewards GTR tokens to holders of staked LP tokens and supports double rewards farms that can\\n// reward users with any ERC-20 token.\\ncontract AlligatorFarmer is Ownable, ReentrancyGuard {\\n    using SafeMath for uint256;\\n    using BoringERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many LP tokens the user has deposited.\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\n        //\\n        // At any point in time, the amount of GTRs entitled to a user but\\n        // is pending to be distributed is:\\n        //\\n        //   pendingReward = (user.amount * pool.accGtrPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws LP tokens to a pool, this is what happens:\\n        //   1. The pool's `accGtrPerShare` (and `lastRewardTimestamp`) gets updated.\\n        //   2. User receives the pending reward sent to their address.\\n        //   3. User's `amount` gets updated.\\n        //   4. User's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        IERC20 lpToken; // Address of the LP token contract.\\n        uint256 allocPoint; // Number of allocation points assigned to this pool. GTRs to distribute per second.\\n        uint256 lastRewardTimestamp; // Last timestamp that GTRs distribution occured.\\n        uint256 accGtrPerShare; // Accumulated GTRs per share, times 1e12. See below.\\n        IRewarder rewarder; // Address of the rewarder for double rewards farms.\\n    }\\n\\n    // The Alligator token\\n    AlligatorToken public gtr;\\n    // Dev address.\\n    address public devAddr;\\n    // Treasury address.\\n    address public treasuryAddr;\\n    // Investor address.\\n    address public investorAddr;\\n    // GTR tokens created per second.\\n    uint256 public gtrPerSec;\\n    // Percentage of pool rewards that goes to the devs.\\n    uint256 public devPercent;\\n    // Percentage of pool rewards that goes to the treasury.\\n    uint256 public treasuryPercent;\\n    // Percentage of pool rewards that goes to the investor.\\n    uint256 public investorPercent;\\n\\n    // Info of each pool.\\n    PoolInfo[] public poolInfo;\\n    // Set of all LP tokens that have been added as pools\\n    EnumerableSet.AddressSet private lpTokens;\\n    // Info of each user that stakes LP tokens.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n    // Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint;\\n    // The timestamp when GTR mining starts.\\n    uint256 public startTimestamp;\\n\\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\\n\\n    event Add(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IRewarder indexed rewarder);\\n    event Set(uint256 indexed pid, uint256 allocPoint, IRewarder indexed rewarder, bool overwrite);\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event UpdatePool(uint256 indexed pid, uint256 lastRewardTimestamp, uint256 lpSupply, uint256 accGtrPerShare);\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event SetDevAddress(address indexed oldAddress, address indexed newAddress);\\n    event UpdateEmissionRate(address indexed user, uint256 _gtrPerSec);\\n\\n    constructor(\\n        AlligatorToken _gtr,\\n        address _devAddr,\\n        address _treasuryAddr,\\n        address _investorAddr,\\n        uint256 _gtrPerSec,\\n        uint256 _startTimestamp,\\n        uint256 _devPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _investorPercent\\n    ) public {\\n        require(0 <= _devPercent && _devPercent <= 500, \\\"constructor: invalid dev percent value\\\");\\n        require(0 <= _treasuryPercent && _treasuryPercent <= 500, \\\"constructor: invalid treasury percent value\\\");\\n        require(0 <= _investorPercent && _investorPercent <= 500, \\\"constructor: invalid investor percent value\\\");\\n        require(_devPercent + _treasuryPercent + _investorPercent <= 500, \\\"constructor: total percent over max\\\");\\n        gtr = _gtr;\\n        devAddr = _devAddr;\\n        treasuryAddr = _treasuryAddr;\\n        investorAddr = _investorAddr;\\n        gtrPerSec = _gtrPerSec;\\n        startTimestamp = _startTimestamp;\\n        devPercent = _devPercent;\\n        treasuryPercent = _treasuryPercent;\\n        investorPercent = _investorPercent;\\n        totalAllocPoint = 0;\\n    }\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    // Add a new LP to the farms. Can only be called by the owner.\\n    // XXX DO NOT add the same LP token more than once. Rewards will be incorrect if you do.\\n    function add(\\n        uint256 _allocPoint,\\n        IERC20 _lpToken,\\n        IRewarder _rewarder\\n    ) public onlyOwner {\\n        require(\\n            Address.isContract(address(_rewarder)) || address(_rewarder) == address(0),\\n            \\\"add: rewarder must be contract or zero\\\"\\n        );\\n        require(!lpTokens.contains(address(_lpToken)), \\\"add: LP already added\\\");\\n        // Sanity check to ensure _lpToken is an ERC20 token\\n        _lpToken.balanceOf(address(this));\\n        // Sanity check if we add a rewarder\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onGtrReward(address(0), 0);\\n        }\\n\\n        massUpdatePools();\\n\\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp ? block.timestamp : startTimestamp;\\n        totalAllocPoint = totalAllocPoint.add(_allocPoint);\\n\\n        poolInfo.push(\\n            PoolInfo({\\n                lpToken: _lpToken,\\n                allocPoint: _allocPoint,\\n                lastRewardTimestamp: lastRewardTimestamp,\\n                accGtrPerShare: 0,\\n                rewarder: _rewarder\\n            })\\n        );\\n        lpTokens.add(address(_lpToken));\\n        emit Add(poolInfo.length.sub(1), _allocPoint, _lpToken, _rewarder);\\n    }\\n\\n    // Update the given pool's GTR allocation point and/or rewarder. Can only be called by the owner.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        IRewarder _rewarder,\\n        bool overwrite\\n    ) public onlyOwner {\\n        require(\\n            Address.isContract(address(_rewarder)) || address(_rewarder) == address(0),\\n            \\\"set: rewarder must be contract or zero\\\"\\n        );\\n\\n        massUpdatePools();\\n\\n        PoolInfo memory pool = poolInfo[_pid];\\n        totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(_allocPoint);\\n        pool.allocPoint = _allocPoint;\\n\\n        if (overwrite) {\\n            _rewarder.onGtrReward(address(0), 0); // sanity check\\n            pool.rewarder = _rewarder;\\n        }\\n\\n        poolInfo[_pid] = pool;\\n\\n        emit Set(_pid, _allocPoint, overwrite ? _rewarder : pool.rewarder, overwrite);\\n    }\\n\\n    // View function to see pending GTRs on the frontend.\\n    function pendingTokens(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint256 pendingGtr,\\n            address bonusTokenAddress,\\n            string memory bonusTokenSymbol,\\n            uint256 pendingBonusToken\\n        )\\n    {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accGtrPerShare = pool.accGtrPerShare;\\n        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTimestamp && lpSupply != 0) {\\n            uint256 multiplier = block.timestamp.sub(pool.lastRewardTimestamp);\\n            uint256 lpPercent = 1000 - devPercent - treasuryPercent - investorPercent;\\n            uint256 gtrReward = multiplier\\n                .mul(gtrPerSec)\\n                .mul(pool.allocPoint)\\n                .div(totalAllocPoint)\\n                .mul(lpPercent)\\n                .div(1000);\\n            accGtrPerShare = accGtrPerShare.add(gtrReward.mul(ACC_TOKEN_PRECISION).div(lpSupply));\\n        }\\n        pendingGtr = user.amount.mul(accGtrPerShare).div(ACC_TOKEN_PRECISION).sub(user.rewardDebt);\\n\\n        // If it is a double reward farm, we return info about the bonus token as well.\\n        if (address(pool.rewarder) != address(0)) {\\n            bonusTokenAddress = address(pool.rewarder.rewardToken());\\n            bonusTokenSymbol = IERC20(pool.rewarder.rewardToken()).safeSymbol();\\n            pendingBonusToken = pool.rewarder.pendingTokens(_user);\\n        }\\n    }\\n\\n    // Update reward variables for all pools. Be careful of gas spending!\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    // Update reward variables of the given pool to be up-to-date.\\n    function updatePool(uint256 _pid) public {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        if (block.timestamp > pool.lastRewardTimestamp) {\\n            uint256 lpSupply = pool.lpToken.balanceOf(address(this));\\n            if (lpSupply > 0) {\\n                uint256 multiplier = block.timestamp.sub(pool.lastRewardTimestamp);\\n                uint256 gtrReward = multiplier.mul(gtrPerSec).mul(pool.allocPoint).div(totalAllocPoint);\\n                uint256 lpPercent = 1000 - devPercent - treasuryPercent - investorPercent;\\n                gtr.mint(devAddr, gtrReward.mul(devPercent).div(1000));\\n                gtr.mint(treasuryAddr, gtrReward.mul(treasuryPercent).div(1000));\\n                gtr.mint(investorAddr, gtrReward.mul(investorPercent).div(1000));\\n                gtr.mint(address(this), gtrReward.mul(lpPercent).div(1000));\\n                pool.accGtrPerShare = pool.accGtrPerShare.add(\\n                    gtrReward.mul(ACC_TOKEN_PRECISION).div(lpSupply).mul(lpPercent).div(1000)\\n                );\\n            }\\n            pool.lastRewardTimestamp = block.timestamp;\\n            poolInfo[_pid] = pool;\\n            emit UpdatePool(_pid, pool.lastRewardTimestamp, lpSupply, pool.accGtrPerShare);\\n        }\\n    }\\n\\n    // Deposit LP tokens to AlligatorFarmer for GTR allocation.\\n    function deposit(uint256 _pid, uint256 _amount) public {\\n        updatePool(_pid);\\n\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.amount > 0) {\\n            // Harvest GTR\\n            uint256 pending = user.amount.mul(pool.accGtrPerShare).div(ACC_TOKEN_PRECISION).sub(user.rewardDebt);\\n            safeGtrTransfer(msg.sender, pending);\\n            emit Harvest(msg.sender, _pid, pending);\\n        }\\n\\n        uint256 balanceBefore = pool.lpToken.balanceOf(address(this));\\n        pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\\n        uint256 receivedAmount = pool.lpToken.balanceOf(address(this)).sub(balanceBefore);\\n\\n        user.amount = user.amount.add(receivedAmount);\\n        user.rewardDebt = user.amount.mul(pool.accGtrPerShare).div(ACC_TOKEN_PRECISION);\\n\\n        IRewarder rewarder = pool.rewarder;\\n        if (address(rewarder) != address(0)) {\\n            rewarder.onGtrReward(msg.sender, user.amount);\\n        }\\n\\n        emit Deposit(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw LP tokens from AlligatorFarmer.\\n    function withdraw(uint256 _pid, uint256 _amount) public {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        require(user.amount >= _amount, \\\"withdraw: amount too high\\\");\\n\\n        updatePool(_pid);\\n\\n        if (user.amount > 0) {\\n            // Harvest GTR\\n            uint256 pending = user.amount.mul(pool.accGtrPerShare).div(ACC_TOKEN_PRECISION).sub(user.rewardDebt);\\n            safeGtrTransfer(msg.sender, pending);\\n            emit Harvest(msg.sender, _pid, pending);\\n        }\\n\\n        user.amount = user.amount.sub(_amount);\\n        user.rewardDebt = user.amount.mul(pool.accGtrPerShare).div(ACC_TOKEN_PRECISION);\\n\\n        IRewarder rewarder = pool.rewarder;\\n        if (address(rewarder) != address(0)) {\\n            rewarder.onGtrReward(msg.sender, user.amount);\\n        }\\n\\n        pool.lpToken.safeTransfer(address(msg.sender), _amount);\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\\n    function emergencyWithdraw(uint256 _pid) public {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        IRewarder rewarder = pool.rewarder;\\n        if (address(rewarder) != address(0)) {\\n            rewarder.onGtrReward(msg.sender, 0);\\n        }\\n\\n        pool.lpToken.safeTransfer(address(msg.sender), amount);\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    // Safe GTR transfer function, just in case a rounding error causes the pool to not have enough GTRs.\\n    function safeGtrTransfer(address _to, uint256 _amount) internal {\\n        uint256 gtrBal = gtr.balanceOf(address(this));\\n        if (_amount > gtrBal) {\\n            gtr.transfer(_to, gtrBal);\\n        } else {\\n            gtr.transfer(_to, _amount);\\n        }\\n    }\\n\\n    // Update the dev address.\\n    function dev(address _devAddr) public {\\n        require(msg.sender == devAddr, \\\"dev: intruder alert\\\");\\n        devAddr = _devAddr;\\n        emit SetDevAddress(msg.sender, _devAddr);\\n    }\\n\\n    // Update treasury address by the previous treasury.\\n    function setTreasuryAddr(address _treasuryAddr) public {\\n        require(msg.sender == treasuryAddr, \\\"setTreasuryAddr: intruder alert\\\");\\n        treasuryAddr = _treasuryAddr;\\n    }\\n\\n    // Update the investor address by the previous investor.\\n    function setInvestorAddr(address _investorAddr) public {\\n        require(msg.sender == investorAddr, \\\"setInvestorAddr: intruder alert\\\");\\n        investorAddr = _investorAddr;\\n    }\\n}\\n\",\"keccak256\":\"0x14dd988e9cfde763541a023ed555ffee4385ec2c799c3822d487849982d20a33\",\"license\":\"MIT\"},\"contracts/AlligatorToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// Alligator Token with Governance.\\ncontract AlligatorToken is ERC20(\\\"Alligator\\\", \\\"GTR\\\"), Ownable {\\n    /// @notice Total number of tokens\\n    uint256 public maxSupply = 700_000_000e18; // 700 million GTR\\n\\n    /// @notice Creates `_amount` token to `_to`. Must only be called by the owner (AlligatorFarmer).\\n    function mint(address _to, uint256 _amount) public onlyOwner {\\n        require(totalSupply().add(_amount) <= maxSupply, \\\"GTR::mint: cannot exceed max supply\\\");\\n        _mint(_to, _amount);\\n        _moveDelegates(address(0), _delegates[_to], _amount);\\n    }\\n\\n    // Copied and modified from YAM code:\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernanceStorage.sol\\n    // https://github.com/yam-finance/yam-protocol/blob/master/contracts/token/YAMGovernance.sol\\n    // Which is copied and modified from COMPOUND:\\n    // https://github.com/compound-finance/compound-protocol/blob/master/contracts/Governance/Comp.sol\\n\\n    /// @notice A record of each accounts delegate\\n    mapping(address => address) internal _delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint256 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice An event thats emitted when an account changes its delegate\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /// @notice An event thats emitted when a delegate account's vote balance changes\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegator The address to get delegatee for\\n     */\\n    function delegates(address delegator) external view returns (address) {\\n        return _delegates[delegator];\\n    }\\n\\n    /**\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n    function delegate(address delegatee) external {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this))\\n        );\\n\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n\\n        address signatory = ecrecover(digest, v, r, s);\\n        require(signatory != address(0), \\\"GTR::delegateBySig: invalid signature\\\");\\n        require(nonce == nonces[signatory]++, \\\"GTR::delegateBySig: invalid nonce\\\");\\n        require(now <= expiry, \\\"GTR::delegateBySig: signature expired\\\");\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * @notice Gets the current votes balance for `account`\\n     * @param account The address to get votes balance\\n     * @return The number of current votes for `account`\\n     */\\n    function getCurrentVotes(address account) external view returns (uint256) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * @notice Determine the prior number of votes for an account as of a block number\\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n     * @param account The address of the account to check\\n     * @param blockNumber The block number to get the vote balance at\\n     * @return The number of votes the account had as of the given block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\\n        require(blockNumber < block.number, \\\"GTR::getPriorVotes: not yet determined\\\");\\n\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = _delegates[delegator];\\n        uint256 delegatorBalance = balanceOf(delegator); // balance of underlying GTRs (not scaled);\\n        _delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint256 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            if (srcRep != address(0)) {\\n                // decrease old representative\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint256 srcRepNew = srcRepOld.sub(amount);\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n\\n            if (dstRep != address(0)) {\\n                // increase new representative\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint256 dstRepNew = dstRepOld.add(amount);\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint256 oldVotes,\\n        uint256 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, \\\"GTR::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x0ee0e5fbe10c7bcd4fd22898784713979b718ef4a4cf6fcfde4d5841b981c2d8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002ca038038062002ca08339810160408190526200003491620001a7565b600062000040620001a3565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180556101f4831115620000bc5760405162461bcd60e51b8152600401620000b3906200028c565b60405180910390fd5b6101f4821115620000e15760405162461bcd60e51b8152600401620000b39062000241565b6101f4811115620001065760405162461bcd60e51b8152600401620000b39062000315565b6101f4818385010111156200012f5760405162461bcd60e51b8152600401620000b390620002d2565b600280546001600160a01b039a8b166001600160a01b03199182161790915560038054998b169982169990991790985560048054978a169789169790971790965560058054959098169490961693909317909555600655600f939093556007929092556008556009556000600e5562000379565b3390565b60008060008060008060008060006101208a8c031215620001c6578485fd5b8951620001d38162000360565b60208b0151909950620001e68162000360565b60408b0151909850620001f98162000360565b60608b01519097506200020c8162000360565b8096505060808a0151945060a08a0151935060c08a0151925060e08a015191506101008a015190509295985092959850929598565b6020808252602b908201527f636f6e7374727563746f723a20696e76616c696420747265617375727920706560408201526a7263656e742076616c756560a81b606082015260800190565b60208082526026908201527f636f6e7374727563746f723a20696e76616c6964206465762070657263656e746040820152652076616c756560d01b606082015260800190565b60208082526023908201527f636f6e7374727563746f723a20746f74616c2070657263656e74206f766572206040820152620dac2f60eb1b606082015260800190565b6020808252602b908201527f636f6e7374727563746f723a20696e76616c696420696e766573746f7220706560408201526a7263656e742076616c756560a81b606082015260800190565b6001600160a01b03811681146200037657600080fd5b50565b61291780620003896000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c806388bba42f116100f9578063d10fc10411610097578063e6fd48bc11610071578063e6fd48bc14610323578063f2fde38b1461032b578063fc3c28af1461033e578063ffcd426314610346576101a9565b8063d10fc10414610300578063da09c72c14610308578063e2bbb15814610310576101a9565b806393f1a40b116100d357806393f1a40b146102b1578063a7e05b9c146102d2578063ab7de098146102e5578063acc4cc50146102f8576101a9565b806388bba42f146102835780638d88a90e146102965780638da5cb5b146102a9576101a9565b806330d9a62a116101665780635312ea8e116101405780635312ea8e14610258578063630b5ba11461026b578063715018a614610273578063753f1b981461027b576101a9565b806330d9a62a1461021d578063441a3e701461023257806351eb05a614610245576101a9565b806304ef9d58146101ae5780630735b208146101cc578063081e3eda146101d45780630f51f8ff146101dc5780631526fe27146101f157806317caf6f114610215575b600080fd5b6101b6610369565b6040516101c39190612801565b60405180910390f35b6101b661036f565b6101b6610375565b6101ef6101ea366004612211565b61037b565b005b6102046101ff366004612300565b6103d0565b6040516101c3959493929190612477565b6101b661041b565b610225610421565b6040516101c39190612426565b6101ef6102403660046123a0565b610430565b6101ef610253366004612300565b61066c565b6101ef610266366004612300565b610abb565b6101ef610c07565b6101ef610c26565b6101b6610caf565b6101ef6102913660046123c1565b610cb5565b6101ef6102a4366004612211565b610efa565b610225610f70565b6102c46102bf366004612330565b610f7f565b6040516101c392919061286b565b6101ef6102e0366004612211565b610fa3565b6101ef6102f336600461235f565b610fef565b610225611339565b610225611348565b610225611357565b6101ef61031e3660046123a0565b611366565b6101b6611684565b6101ef610339366004612211565b61168a565b6101b661174a565b610359610354366004612330565b611750565b6040516101c3949392919061280a565b60085481565b60095481565b600a5490565b6005546001600160a01b031633146103ae5760405162461bcd60e51b81526004016103a5906126d2565b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600a81815481106103dd57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0393841695509193909290911685565b600e5481565b6004546001600160a01b031681565b6104386121d0565b600a838154811061044557fe5b600091825260208083206040805160a081018252600590940290910180546001600160a01b03908116855260018201548585015260028201548584015260038201546060860152600490910154166080840152868452600d82528084203385529091529091208054919250908311156104d05760405162461bcd60e51b81526004016103a5906125c9565b6104d98461066c565b80541561056a57600061051a826001015461051464e8d4a5100061050e87606001518760000154611abc90919063ffffffff16565b90611aff565b90611b31565b90506105263382611b59565b84336001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae0660924954836040516105609190612801565b60405180910390a3505b80546105769084611b31565b80825560608301516105939164e8d4a510009161050e9190611abc565b600182015560808201516001600160a01b0381161561060d5781546040516388331ad960e01b81526001600160a01b038316916388331ad9916105da91339160040161243a565b600060405180830381600087803b1580156105f457600080fd5b505af1158015610608573d6000803e3d6000fd5b505050505b8251610623906001600160a01b03163386611cf9565b84336001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688660405161065d9190612801565b60405180910390a35050505050565b6106746121d0565b600a828154811061068157fe5b60009182526020918290206040805160a081018252600590930290910180546001600160a01b0390811684526001820154948401949094526002810154918301829052600381015460608401526004015490921660808201529150421115610ab75780516040516370a0823160e01b81526000916001600160a01b0316906370a0823190610713903090600401612426565b60206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107639190612318565b905080156109f6576000610784836040015142611b3190919063ffffffff16565b905060006107b1600e5461050e86602001516107ab60065487611abc90919063ffffffff16565b90611abc565b6009546008546007546002546003549495506103e88281039390930393909303936001600160a01b03938416936340c10f19939116916107f7919061050e908890611abc565b6040518363ffffffff1660e01b815260040161081492919061243a565b600060405180830381600087803b15801561082e57600080fd5b505af1158015610842573d6000803e3d6000fd5b50506002546004546008546001600160a01b0392831694506340c10f199350911690610877906103e89061050e908890611abc565b6040518363ffffffff1660e01b815260040161089492919061243a565b600060405180830381600087803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b50506002546005546009546001600160a01b0392831694506340c10f1993509116906108f7906103e89061050e908890611abc565b6040518363ffffffff1660e01b815260040161091492919061243a565b600060405180830381600087803b15801561092e57600080fd5b505af1158015610942573d6000803e3d6000fd5b50506002546001600160a01b031691506340c10f1990503061096a6103e861050e8787611abc565b6040518363ffffffff1660e01b815260040161098792919061243a565b600060405180830381600087803b1580156109a157600080fd5b505af11580156109b5573d6000803e3d6000fd5b505050506109ed6109e26103e861050e846107ab8961050e64e8d4a510008a611abc90919063ffffffff16565b606087015190611def565b60608601525050505b426040830152600a805483919085908110610a0d57fe5b6000918252602091829020835160059092020180546001600160a01b039283166001600160a01b0319918216178255928401516001820155604080850151600283015560608086015160038401556080909501516004909201805492909316919093161790558381015191840151905185927f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f4692610aad92869190612879565b60405180910390a2505b5050565b610ac36121d0565b600a8281548110610ad057fe5b600091825260208083206040805160a081018252600590940290910180546001600160a01b0390811685526001808301548686015260028301548685015260038301546060870152600490920154811660808601908152888752600d85528387203388529094529185208054868255918101959095559151929450909190811615610bb7576040516388331ad960e01b81526001600160a01b038216906388331ad990610b8490339060009060040161243a565b600060405180830381600087803b158015610b9e57600080fd5b505af1158015610bb2573d6000803e3d6000fd5b505050505b8351610bcd906001600160a01b03163384611cf9565b84336001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958460405161065d9190612801565b600a5460005b81811015610ab757610c1e8161066c565b600101610c0d565b610c2e611e14565b6001600160a01b0316610c3f610f70565b6001600160a01b031614610c655760405162461bcd60e51b81526004016103a590612670565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60065481565b610cbd611e14565b6001600160a01b0316610cce610f70565b6001600160a01b031614610cf45760405162461bcd60e51b81526004016103a590612670565b610cfd82611e18565b80610d0f57506001600160a01b038216155b610d2b5760405162461bcd60e51b81526004016103a590612709565b610d33610c07565b610d3b6121d0565b600a8581548110610d4857fe5b60009182526020918290206040805160a081018252600590930290910180546001600160a01b03908116845260018201549484018590526002820154928401929092526003810154606084015260040154166080820152600e54909250610dba918691610db491611b31565b90611def565b600e55602081018490528115610e3b576040516388331ad960e01b81526001600160a01b038416906388331ad990610df990600090819060040161243a565b600060405180830381600087803b158015610e1357600080fd5b505af1158015610e27573d6000803e3d6000fd5b5050506001600160a01b0384166080830152505b80600a8681548110610e4957fe5b600091825260209182902083516005929092020180546001600160a01b03199081166001600160a01b03938416178255928401516001820155604084015160028201556060840151600382015560809093015160049093018054909216921691909117905581610ebd578060800151610ebf565b825b6001600160a01b0316857fa54644aae5c48c5971516f334e4fe8ecbc7930e23f34877d4203c6551e67ffaa868560405161065d92919061285b565b6003546001600160a01b03163314610f245760405162461bcd60e51b81526004016103a5906126a5565b600380546001600160a01b0319166001600160a01b03831690811790915560405133907f618c54559e94f1499a808aad71ee8729f8e74e8c48e979616328ce493a1a52e790600090a350565b6000546001600160a01b031690565b600d6020908152600092835260408084209091529082529020805460019091015482565b6004546001600160a01b03163314610fcd5760405162461bcd60e51b81526004016103a5906127ca565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610ff7611e14565b6001600160a01b0316611008610f70565b6001600160a01b03161461102e5760405162461bcd60e51b81526004016103a590612670565b61103781611e18565b8061104957506001600160a01b038116155b6110655760405162461bcd60e51b81526004016103a59061274f565b611070600b83611e22565b1561108d5760405162461bcd60e51b81526004016103a590612641565b6040516370a0823160e01b81526001600160a01b038316906370a08231906110b9903090600401612426565b60206040518083038186803b1580156110d157600080fd5b505afa1580156110e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111099190612318565b506001600160a01b0381161561117b576040516388331ad960e01b81526001600160a01b038216906388331ad99061114890600090819060040161243a565b600060405180830381600087803b15801561116257600080fd5b505af1158015611176573d6000803e3d6000fd5b505050505b611183610c07565b6000600f54421161119657600f54611198565b425b600e549091506111a89085611def565b600e556040805160a0810182526001600160a01b0385811682526020820187815292820184815260006060840181815287841660808601908152600a8054600181018255935294517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8600590930292830180546001600160a01b031990811692871692909217905595517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a983015591517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa82015590517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ab82015591517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ac909201805490931691161790556112dd600b84611e37565b50600a546001600160a01b0380841691908516906112fc906001611b31565b7f4b16bd2431ad24dc020ab0e1de7fcb6563dead6a24fb10089d6c23e97a70381f8760405161132b9190612801565b60405180910390a450505050565b6005546001600160a01b031681565b6002546001600160a01b031681565b6003546001600160a01b031681565b61136f8261066c565b6113776121d0565b600a838154811061138457fe5b600091825260208083206040805160a081018252600590940290910180546001600160a01b03908116855260018201548585015260028201548584015260038201546060860152600490910154166080840152868452600d825280842033855290915290912080549192509015611473576000611423826001015461051464e8d4a5100061050e87606001518760000154611abc90919063ffffffff16565b905061142f3382611b59565b84336001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae0660924954836040516114699190612801565b60405180910390a3505b81516040516370a0823160e01b81526000916001600160a01b0316906370a08231906114a3903090600401612426565b60206040518083038186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f39190612318565b835190915061150d906001600160a01b0316333087611e4c565b82516040516370a0823160e01b81526000916115939184916001600160a01b0316906370a0823190611543903090600401612426565b60206040518083038186803b15801561155b57600080fd5b505afa15801561156f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190612318565b83549091506115a29082611def565b80845560608501516115bf9164e8d4a510009161050e9190611abc565b600184015560808401516001600160a01b038116156116395783546040516388331ad960e01b81526001600160a01b038316916388331ad99161160691339160040161243a565b600060405180830381600087803b15801561162057600080fd5b505af1158015611634573d6000803e3d6000fd5b505050505b86336001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15886040516116739190612801565b60405180910390a350505050505050565b600f5481565b611692611e14565b6001600160a01b03166116a3610f70565b6001600160a01b0316146116c95760405162461bcd60e51b81526004016103a590612670565b6001600160a01b0381166116ef5760405162461bcd60e51b81526004016103a5906124de565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60075481565b6000806060600061175f6121d0565b600a878154811061176c57fe5b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015485850152600282015485840152600382015460608601908152600492830154821660808701528d8752600d85528387208d831688529094528286209351855193516370a0823160e01b8152959750939593949216916370a082319161180391309101612426565b60206040518083038186803b15801561181b57600080fd5b505afa15801561182f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118539190612318565b905083604001514211801561186757508015155b156118ee576000611885856040015142611b3190919063ffffffff16565b905060006009546008546007546103e8030303905060006118c96103e861050e846107ab600e5461050e8d602001516107ab6006548c611abc90919063ffffffff16565b90506118e86118e18561050e8464e8d4a51000611abc565b8690611def565b94505050505b611916836001015461051464e8d4a5100061050e868860000154611abc90919063ffffffff16565b60808501519098506001600160a01b031615611aaf5783608001516001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561196957600080fd5b505afa15801561197d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a19190612249565b9650611a2984608001516001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e357600080fd5b505afa1580156119f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1b9190612249565b6001600160a01b0316611f45565b608085015160405163c031a66f60e01b81529197506001600160a01b03169063c031a66f90611a5c908c90600401612426565b60206040518083038186803b158015611a7457600080fd5b505afa158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aac9190612318565b94505b5050505092959194509250565b600082611acb57506000611af9565b82820282848281611ad857fe5b0414611af65760405162461bcd60e51b81526004016103a590612600565b90505b92915050565b6000808211611b205760405162461bcd60e51b81526004016103a590612592565b818381611b2957fe5b049392505050565b600082821115611b535760405162461bcd60e51b81526004016103a59061255b565b50900390565b6002546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611b8a903090600401612426565b60206040518083038186803b158015611ba257600080fd5b505afa158015611bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bda9190612318565b905080821115611c6e5760025460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611c16908690859060040161243a565b602060405180830381600087803b158015611c3057600080fd5b505af1158015611c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c68919061222d565b50611cf4565b60025460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611ca0908690869060040161243a565b602060405180830381600087803b158015611cba57600080fd5b505af1158015611cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf2919061222d565b505b505050565b60006060846001600160a01b031663a9059cbb60e01b8585604051602401611d2292919061243a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611d60919061240a565b6000604051808303816000865af19150503d8060008114611d9d576040519150601f19603f3d011682016040523d82523d6000602084013e611da2565b606091505b5091509150818015611dcc575080511580611dcc575080806020019051810190611dcc919061222d565b611de85760405162461bcd60e51b81526004016103a5906124a7565b5050505050565b600082820183811015611af65760405162461bcd60e51b81526004016103a590612524565b3390565b803b15155b919050565b6000611af6836001600160a01b038416612008565b6000611af6836001600160a01b038416612020565b60006060856001600160a01b03166323b872dd60e01b868686604051602401611e7793929190612453565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611eb5919061240a565b6000604051808303816000865af19150503d8060008114611ef2576040519150601f19603f3d011682016040523d82523d6000602084013e611ef7565b606091505b5091509150818015611f21575080511580611f21575080806020019051810190611f21919061222d565b611f3d5760405162461bcd60e51b81526004016103a590612795565b505050505050565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b03861691611f8c919061240a565b600060405180830381855afa9150503d8060008114611fc7576040519150601f19603f3d011682016040523d82523d6000602084013e611fcc565b606091505b509150915081611ff757604051806040016040528060038152602001623f3f3f60e81b815250612000565b6120008161206a565b949350505050565b60009081526001919091016020526040902054151590565b600061202c8383612008565b61206257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611af9565b506000611af9565b6060604082511061209057818060200190518101906120899190612265565b9050611e1d565b8151602014156121b05760005b60208160ff161080156120cc5750828160ff16815181106120ba57fe5b01602001516001600160f81b03191615155b156120d95760010161209d565b60608160ff1667ffffffffffffffff811180156120f557600080fd5b506040519080825280601f01601f191660200182016040528015612120576020820181803683370190505b509050600091505b60208260ff161080156121575750838260ff168151811061214557fe5b01602001516001600160f81b03191615155b156121a757838260ff168151811061216b57fe5b602001015160f81c60f81b818360ff168151811061218557fe5b60200101906001600160f81b031916908160001a905350600190910190612128565b9150611e1d9050565b506040805180820190915260038152623f3f3f60e81b6020820152611e1d565b6040518060a0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b600060208284031215612222578081fd5b8135611af6816128bb565b60006020828403121561223e578081fd5b8151611af6816128d3565b60006020828403121561225a578081fd5b8151611af6816128bb565b600060208284031215612276578081fd5b815167ffffffffffffffff8082111561228d578283fd5b818401915084601f8301126122a0578283fd5b8151818111156122ae578384fd5b604051601f8201601f1916810160200183811182821017156122ce578586fd5b6040528181528382016020018710156122e5578485fd5b6122f682602083016020870161288f565b9695505050505050565b600060208284031215612311578081fd5b5035919050565b600060208284031215612329578081fd5b5051919050565b60008060408385031215612342578081fd5b823591506020830135612354816128bb565b809150509250929050565b600080600060608486031215612373578081fd5b833592506020840135612385816128bb565b91506040840135612395816128bb565b809150509250925092565b600080604083850312156123b2578182fd5b50508035926020909101359150565b600080600080608085870312156123d6578081fd5b843593506020850135925060408501356123ef816128bb565b915060608501356123ff816128d3565b939692955090935050565b6000825161241c81846020870161288f565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039586168152602081019490945260408401929092526060830152909116608082015260a00190565b6020808252601c908201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526019908201527f77697468647261773a20616d6f756e7420746f6f206869676800000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601590820152741859190e88131408185b1c9958591e481859191959605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527219195d8e881a5b9d1c9d59195c88185b195c9d606a1b604082015260600190565b6020808252601f908201527f736574496e766573746f72416464723a20696e74727564657220616c65727400604082015260600190565b60208082526026908201527f7365743a207265776172646572206d75737420626520636f6e7472616374206f60408201526572207a65726f60d01b606082015260800190565b60208082526026908201527f6164643a207265776172646572206d75737420626520636f6e7472616374206f60408201526572207a65726f60d01b606082015260800190565b6020808252818101527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604082015260600190565b6020808252601f908201527f7365745472656173757279416464723a20696e74727564657220616c65727400604082015260600190565b90815260200190565b600085825260018060a01b038516602083015260806040830152835180608084015261283d8160a085016020880161288f565b606083019390935250601f91909101601f19160160a0019392505050565b9182521515602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60005b838110156128aa578181015183820152602001612892565b83811115611cf25750506000910152565b6001600160a01b03811681146128d057600080fd5b50565b80151581146128d057600080fdfea26469706673582212202959141d5d690acc903671748641b9f847df864224025b0e1c304700edb675eb64736f6c634300060c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c806388bba42f116100f9578063d10fc10411610097578063e6fd48bc11610071578063e6fd48bc14610323578063f2fde38b1461032b578063fc3c28af1461033e578063ffcd426314610346576101a9565b8063d10fc10414610300578063da09c72c14610308578063e2bbb15814610310576101a9565b806393f1a40b116100d357806393f1a40b146102b1578063a7e05b9c146102d2578063ab7de098146102e5578063acc4cc50146102f8576101a9565b806388bba42f146102835780638d88a90e146102965780638da5cb5b146102a9576101a9565b806330d9a62a116101665780635312ea8e116101405780635312ea8e14610258578063630b5ba11461026b578063715018a614610273578063753f1b981461027b576101a9565b806330d9a62a1461021d578063441a3e701461023257806351eb05a614610245576101a9565b806304ef9d58146101ae5780630735b208146101cc578063081e3eda146101d45780630f51f8ff146101dc5780631526fe27146101f157806317caf6f114610215575b600080fd5b6101b6610369565b6040516101c39190612801565b60405180910390f35b6101b661036f565b6101b6610375565b6101ef6101ea366004612211565b61037b565b005b6102046101ff366004612300565b6103d0565b6040516101c3959493929190612477565b6101b661041b565b610225610421565b6040516101c39190612426565b6101ef6102403660046123a0565b610430565b6101ef610253366004612300565b61066c565b6101ef610266366004612300565b610abb565b6101ef610c07565b6101ef610c26565b6101b6610caf565b6101ef6102913660046123c1565b610cb5565b6101ef6102a4366004612211565b610efa565b610225610f70565b6102c46102bf366004612330565b610f7f565b6040516101c392919061286b565b6101ef6102e0366004612211565b610fa3565b6101ef6102f336600461235f565b610fef565b610225611339565b610225611348565b610225611357565b6101ef61031e3660046123a0565b611366565b6101b6611684565b6101ef610339366004612211565b61168a565b6101b661174a565b610359610354366004612330565b611750565b6040516101c3949392919061280a565b60085481565b60095481565b600a5490565b6005546001600160a01b031633146103ae5760405162461bcd60e51b81526004016103a5906126d2565b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600a81815481106103dd57fe5b6000918252602090912060059091020180546001820154600283015460038401546004909401546001600160a01b0393841695509193909290911685565b600e5481565b6004546001600160a01b031681565b6104386121d0565b600a838154811061044557fe5b600091825260208083206040805160a081018252600590940290910180546001600160a01b03908116855260018201548585015260028201548584015260038201546060860152600490910154166080840152868452600d82528084203385529091529091208054919250908311156104d05760405162461bcd60e51b81526004016103a5906125c9565b6104d98461066c565b80541561056a57600061051a826001015461051464e8d4a5100061050e87606001518760000154611abc90919063ffffffff16565b90611aff565b90611b31565b90506105263382611b59565b84336001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae0660924954836040516105609190612801565b60405180910390a3505b80546105769084611b31565b80825560608301516105939164e8d4a510009161050e9190611abc565b600182015560808201516001600160a01b0381161561060d5781546040516388331ad960e01b81526001600160a01b038316916388331ad9916105da91339160040161243a565b600060405180830381600087803b1580156105f457600080fd5b505af1158015610608573d6000803e3d6000fd5b505050505b8251610623906001600160a01b03163386611cf9565b84336001600160a01b03167ff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b5688660405161065d9190612801565b60405180910390a35050505050565b6106746121d0565b600a828154811061068157fe5b60009182526020918290206040805160a081018252600590930290910180546001600160a01b0390811684526001820154948401949094526002810154918301829052600381015460608401526004015490921660808201529150421115610ab75780516040516370a0823160e01b81526000916001600160a01b0316906370a0823190610713903090600401612426565b60206040518083038186803b15801561072b57600080fd5b505afa15801561073f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107639190612318565b905080156109f6576000610784836040015142611b3190919063ffffffff16565b905060006107b1600e5461050e86602001516107ab60065487611abc90919063ffffffff16565b90611abc565b6009546008546007546002546003549495506103e88281039390930393909303936001600160a01b03938416936340c10f19939116916107f7919061050e908890611abc565b6040518363ffffffff1660e01b815260040161081492919061243a565b600060405180830381600087803b15801561082e57600080fd5b505af1158015610842573d6000803e3d6000fd5b50506002546004546008546001600160a01b0392831694506340c10f199350911690610877906103e89061050e908890611abc565b6040518363ffffffff1660e01b815260040161089492919061243a565b600060405180830381600087803b1580156108ae57600080fd5b505af11580156108c2573d6000803e3d6000fd5b50506002546005546009546001600160a01b0392831694506340c10f1993509116906108f7906103e89061050e908890611abc565b6040518363ffffffff1660e01b815260040161091492919061243a565b600060405180830381600087803b15801561092e57600080fd5b505af1158015610942573d6000803e3d6000fd5b50506002546001600160a01b031691506340c10f1990503061096a6103e861050e8787611abc565b6040518363ffffffff1660e01b815260040161098792919061243a565b600060405180830381600087803b1580156109a157600080fd5b505af11580156109b5573d6000803e3d6000fd5b505050506109ed6109e26103e861050e846107ab8961050e64e8d4a510008a611abc90919063ffffffff16565b606087015190611def565b60608601525050505b426040830152600a805483919085908110610a0d57fe5b6000918252602091829020835160059092020180546001600160a01b039283166001600160a01b0319918216178255928401516001820155604080850151600283015560608086015160038401556080909501516004909201805492909316919093161790558381015191840151905185927f3be3541fc42237d611b30329040bfa4569541d156560acdbbae57640d20b8f4692610aad92869190612879565b60405180910390a2505b5050565b610ac36121d0565b600a8281548110610ad057fe5b600091825260208083206040805160a081018252600590940290910180546001600160a01b0390811685526001808301548686015260028301548685015260038301546060870152600490920154811660808601908152888752600d85528387203388529094529185208054868255918101959095559151929450909190811615610bb7576040516388331ad960e01b81526001600160a01b038216906388331ad990610b8490339060009060040161243a565b600060405180830381600087803b158015610b9e57600080fd5b505af1158015610bb2573d6000803e3d6000fd5b505050505b8351610bcd906001600160a01b03163384611cf9565b84336001600160a01b03167fbb757047c2b5f3974fe26b7c10f732e7bce710b0952a71082702781e62ae05958460405161065d9190612801565b600a5460005b81811015610ab757610c1e8161066c565b600101610c0d565b610c2e611e14565b6001600160a01b0316610c3f610f70565b6001600160a01b031614610c655760405162461bcd60e51b81526004016103a590612670565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60065481565b610cbd611e14565b6001600160a01b0316610cce610f70565b6001600160a01b031614610cf45760405162461bcd60e51b81526004016103a590612670565b610cfd82611e18565b80610d0f57506001600160a01b038216155b610d2b5760405162461bcd60e51b81526004016103a590612709565b610d33610c07565b610d3b6121d0565b600a8581548110610d4857fe5b60009182526020918290206040805160a081018252600590930290910180546001600160a01b03908116845260018201549484018590526002820154928401929092526003810154606084015260040154166080820152600e54909250610dba918691610db491611b31565b90611def565b600e55602081018490528115610e3b576040516388331ad960e01b81526001600160a01b038416906388331ad990610df990600090819060040161243a565b600060405180830381600087803b158015610e1357600080fd5b505af1158015610e27573d6000803e3d6000fd5b5050506001600160a01b0384166080830152505b80600a8681548110610e4957fe5b600091825260209182902083516005929092020180546001600160a01b03199081166001600160a01b03938416178255928401516001820155604084015160028201556060840151600382015560809093015160049093018054909216921691909117905581610ebd578060800151610ebf565b825b6001600160a01b0316857fa54644aae5c48c5971516f334e4fe8ecbc7930e23f34877d4203c6551e67ffaa868560405161065d92919061285b565b6003546001600160a01b03163314610f245760405162461bcd60e51b81526004016103a5906126a5565b600380546001600160a01b0319166001600160a01b03831690811790915560405133907f618c54559e94f1499a808aad71ee8729f8e74e8c48e979616328ce493a1a52e790600090a350565b6000546001600160a01b031690565b600d6020908152600092835260408084209091529082529020805460019091015482565b6004546001600160a01b03163314610fcd5760405162461bcd60e51b81526004016103a5906127ca565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b610ff7611e14565b6001600160a01b0316611008610f70565b6001600160a01b03161461102e5760405162461bcd60e51b81526004016103a590612670565b61103781611e18565b8061104957506001600160a01b038116155b6110655760405162461bcd60e51b81526004016103a59061274f565b611070600b83611e22565b1561108d5760405162461bcd60e51b81526004016103a590612641565b6040516370a0823160e01b81526001600160a01b038316906370a08231906110b9903090600401612426565b60206040518083038186803b1580156110d157600080fd5b505afa1580156110e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111099190612318565b506001600160a01b0381161561117b576040516388331ad960e01b81526001600160a01b038216906388331ad99061114890600090819060040161243a565b600060405180830381600087803b15801561116257600080fd5b505af1158015611176573d6000803e3d6000fd5b505050505b611183610c07565b6000600f54421161119657600f54611198565b425b600e549091506111a89085611def565b600e556040805160a0810182526001600160a01b0385811682526020820187815292820184815260006060840181815287841660808601908152600a8054600181018255935294517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8600590930292830180546001600160a01b031990811692871692909217905595517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a983015591517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2aa82015590517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ab82015591517fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2ac909201805490931691161790556112dd600b84611e37565b50600a546001600160a01b0380841691908516906112fc906001611b31565b7f4b16bd2431ad24dc020ab0e1de7fcb6563dead6a24fb10089d6c23e97a70381f8760405161132b9190612801565b60405180910390a450505050565b6005546001600160a01b031681565b6002546001600160a01b031681565b6003546001600160a01b031681565b61136f8261066c565b6113776121d0565b600a838154811061138457fe5b600091825260208083206040805160a081018252600590940290910180546001600160a01b03908116855260018201548585015260028201548584015260038201546060860152600490910154166080840152868452600d825280842033855290915290912080549192509015611473576000611423826001015461051464e8d4a5100061050e87606001518760000154611abc90919063ffffffff16565b905061142f3382611b59565b84336001600160a01b03167f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae0660924954836040516114699190612801565b60405180910390a3505b81516040516370a0823160e01b81526000916001600160a01b0316906370a08231906114a3903090600401612426565b60206040518083038186803b1580156114bb57600080fd5b505afa1580156114cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f39190612318565b835190915061150d906001600160a01b0316333087611e4c565b82516040516370a0823160e01b81526000916115939184916001600160a01b0316906370a0823190611543903090600401612426565b60206040518083038186803b15801561155b57600080fd5b505afa15801561156f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105149190612318565b83549091506115a29082611def565b80845560608501516115bf9164e8d4a510009161050e9190611abc565b600184015560808401516001600160a01b038116156116395783546040516388331ad960e01b81526001600160a01b038316916388331ad99161160691339160040161243a565b600060405180830381600087803b15801561162057600080fd5b505af1158015611634573d6000803e3d6000fd5b505050505b86336001600160a01b03167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15886040516116739190612801565b60405180910390a350505050505050565b600f5481565b611692611e14565b6001600160a01b03166116a3610f70565b6001600160a01b0316146116c95760405162461bcd60e51b81526004016103a590612670565b6001600160a01b0381166116ef5760405162461bcd60e51b81526004016103a5906124de565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60075481565b6000806060600061175f6121d0565b600a878154811061176c57fe5b600091825260208083206040805160a081018252600590940290910180546001600160a01b039081168552600182015485850152600282015485840152600382015460608601908152600492830154821660808701528d8752600d85528387208d831688529094528286209351855193516370a0823160e01b8152959750939593949216916370a082319161180391309101612426565b60206040518083038186803b15801561181b57600080fd5b505afa15801561182f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118539190612318565b905083604001514211801561186757508015155b156118ee576000611885856040015142611b3190919063ffffffff16565b905060006009546008546007546103e8030303905060006118c96103e861050e846107ab600e5461050e8d602001516107ab6006548c611abc90919063ffffffff16565b90506118e86118e18561050e8464e8d4a51000611abc565b8690611def565b94505050505b611916836001015461051464e8d4a5100061050e868860000154611abc90919063ffffffff16565b60808501519098506001600160a01b031615611aaf5783608001516001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b15801561196957600080fd5b505afa15801561197d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a19190612249565b9650611a2984608001516001600160a01b031663f7c618c16040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e357600080fd5b505afa1580156119f7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1b9190612249565b6001600160a01b0316611f45565b608085015160405163c031a66f60e01b81529197506001600160a01b03169063c031a66f90611a5c908c90600401612426565b60206040518083038186803b158015611a7457600080fd5b505afa158015611a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aac9190612318565b94505b5050505092959194509250565b600082611acb57506000611af9565b82820282848281611ad857fe5b0414611af65760405162461bcd60e51b81526004016103a590612600565b90505b92915050565b6000808211611b205760405162461bcd60e51b81526004016103a590612592565b818381611b2957fe5b049392505050565b600082821115611b535760405162461bcd60e51b81526004016103a59061255b565b50900390565b6002546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611b8a903090600401612426565b60206040518083038186803b158015611ba257600080fd5b505afa158015611bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bda9190612318565b905080821115611c6e5760025460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611c16908690859060040161243a565b602060405180830381600087803b158015611c3057600080fd5b505af1158015611c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c68919061222d565b50611cf4565b60025460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb90611ca0908690869060040161243a565b602060405180830381600087803b158015611cba57600080fd5b505af1158015611cce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf2919061222d565b505b505050565b60006060846001600160a01b031663a9059cbb60e01b8585604051602401611d2292919061243a565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611d60919061240a565b6000604051808303816000865af19150503d8060008114611d9d576040519150601f19603f3d011682016040523d82523d6000602084013e611da2565b606091505b5091509150818015611dcc575080511580611dcc575080806020019051810190611dcc919061222d565b611de85760405162461bcd60e51b81526004016103a5906124a7565b5050505050565b600082820183811015611af65760405162461bcd60e51b81526004016103a590612524565b3390565b803b15155b919050565b6000611af6836001600160a01b038416612008565b6000611af6836001600160a01b038416612020565b60006060856001600160a01b03166323b872dd60e01b868686604051602401611e7793929190612453565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b0319909416939093179092529051611eb5919061240a565b6000604051808303816000865af19150503d8060008114611ef2576040519150601f19603f3d011682016040523d82523d6000602084013e611ef7565b606091505b5091509150818015611f21575080511580611f21575080806020019051810190611f21919061222d565b611f3d5760405162461bcd60e51b81526004016103a590612795565b505050505050565b60408051600481526024810182526020810180516001600160e01b03166395d89b4160e01b179052905160609160009183916001600160a01b03861691611f8c919061240a565b600060405180830381855afa9150503d8060008114611fc7576040519150601f19603f3d011682016040523d82523d6000602084013e611fcc565b606091505b509150915081611ff757604051806040016040528060038152602001623f3f3f60e81b815250612000565b6120008161206a565b949350505050565b60009081526001919091016020526040902054151590565b600061202c8383612008565b61206257508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611af9565b506000611af9565b6060604082511061209057818060200190518101906120899190612265565b9050611e1d565b8151602014156121b05760005b60208160ff161080156120cc5750828160ff16815181106120ba57fe5b01602001516001600160f81b03191615155b156120d95760010161209d565b60608160ff1667ffffffffffffffff811180156120f557600080fd5b506040519080825280601f01601f191660200182016040528015612120576020820181803683370190505b509050600091505b60208260ff161080156121575750838260ff168151811061214557fe5b01602001516001600160f81b03191615155b156121a757838260ff168151811061216b57fe5b602001015160f81c60f81b818360ff168151811061218557fe5b60200101906001600160f81b031916908160001a905350600190910190612128565b9150611e1d9050565b506040805180820190915260038152623f3f3f60e81b6020820152611e1d565b6040518060a0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160006001600160a01b031681525090565b600060208284031215612222578081fd5b8135611af6816128bb565b60006020828403121561223e578081fd5b8151611af6816128d3565b60006020828403121561225a578081fd5b8151611af6816128bb565b600060208284031215612276578081fd5b815167ffffffffffffffff8082111561228d578283fd5b818401915084601f8301126122a0578283fd5b8151818111156122ae578384fd5b604051601f8201601f1916810160200183811182821017156122ce578586fd5b6040528181528382016020018710156122e5578485fd5b6122f682602083016020870161288f565b9695505050505050565b600060208284031215612311578081fd5b5035919050565b600060208284031215612329578081fd5b5051919050565b60008060408385031215612342578081fd5b823591506020830135612354816128bb565b809150509250929050565b600080600060608486031215612373578081fd5b833592506020840135612385816128bb565b91506040840135612395816128bb565b809150509250925092565b600080604083850312156123b2578182fd5b50508035926020909101359150565b600080600080608085870312156123d6578081fd5b843593506020850135925060408501356123ef816128bb565b915060608501356123ff816128d3565b939692955090935050565b6000825161241c81846020870161288f565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b039586168152602081019490945260408401929092526060830152909116608082015260a00190565b6020808252601c908201527f426f72696e6745524332303a205472616e73666572206661696c656400000000604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252601e908201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604082015260600190565b6020808252601a908201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604082015260600190565b60208082526019908201527f77697468647261773a20616d6f756e7420746f6f206869676800000000000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b6020808252601590820152741859190e88131408185b1c9958591e481859191959605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526013908201527219195d8e881a5b9d1c9d59195c88185b195c9d606a1b604082015260600190565b6020808252601f908201527f736574496e766573746f72416464723a20696e74727564657220616c65727400604082015260600190565b60208082526026908201527f7365743a207265776172646572206d75737420626520636f6e7472616374206f60408201526572207a65726f60d01b606082015260800190565b60208082526026908201527f6164643a207265776172646572206d75737420626520636f6e7472616374206f60408201526572207a65726f60d01b606082015260800190565b6020808252818101527f426f72696e6745524332303a205472616e7366657246726f6d206661696c6564604082015260600190565b6020808252601f908201527f7365745472656173757279416464723a20696e74727564657220616c65727400604082015260600190565b90815260200190565b600085825260018060a01b038516602083015260806040830152835180608084015261283d8160a085016020880161288f565b606083019390935250601f91909101601f19160160a0019392505050565b9182521515602082015260400190565b918252602082015260400190565b9283526020830191909152604082015260600190565b60005b838110156128aa578181015183820152602001612892565b83811115611cf25750506000910152565b6001600160a01b03811681146128d057600080fd5b50565b80151581146128d057600080fdfea26469706673582212202959141d5d690acc903671748641b9f847df864224025b0e1c304700edb675eb64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1867,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3022,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "gtr",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AlligatorToken)7128"
      },
      {
        "astId": 3024,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "devAddr",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3026,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "treasuryAddr",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3028,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "investorAddr",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 3030,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "gtrPerSec",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3032,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "devPercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3034,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "treasuryPercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3036,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "investorPercent",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3039,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "poolInfo",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_struct(PoolInfo)3020_storage)dyn_storage"
      },
      {
        "astId": 3041,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "lpTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(AddressSet)1640_storage"
      },
      {
        "astId": 3047,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "userInfo",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3009_storage))"
      },
      {
        "astId": 3049,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 3051,
        "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
        "label": "startTimestamp",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)3020_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)3020_storage",
        "encoding": "dynamic_array",
        "label": "struct AlligatorFarmer.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(AlligatorToken)7128": {
        "encoding": "inplace",
        "label": "contract AlligatorToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)1045": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)2689": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UserInfo)3009_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct AlligatorFarmer.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)3009_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)3009_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct AlligatorFarmer.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)3009_storage)"
      },
      "t_struct(AddressSet)1640_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1639,
            "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1375_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PoolInfo)3020_storage": {
        "encoding": "inplace",
        "label": "struct AlligatorFarmer.PoolInfo",
        "members": [
          {
            "astId": 3011,
            "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
            "label": "lpToken",
            "offset": 0,
            "slot": "0",
            "type": "t_contract(IERC20)1045"
          },
          {
            "astId": 3013,
            "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
            "label": "allocPoint",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3015,
            "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
            "label": "lastRewardTimestamp",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3017,
            "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
            "label": "accGtrPerShare",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 3019,
            "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
            "label": "rewarder",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IRewarder)2689"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Set)1375_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1370,
            "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1374,
            "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UserInfo)3009_storage": {
        "encoding": "inplace",
        "label": "struct AlligatorFarmer.UserInfo",
        "members": [
          {
            "astId": 3006,
            "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3008,
            "contract": "contracts/AlligatorFarmer.sol:AlligatorFarmer",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}